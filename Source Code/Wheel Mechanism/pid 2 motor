
//Define pin numbers for motors
#define in11 4
#define in21 5
#define in31 6
#define in41 7
#define enA1 9
#define enB1 10
int motorSpeedA1 = 0;
int motorSpeedB1 = 0;
int motorSpeedA2 = 0;
int motorSpeedB2 = 0;

//Define pin numbers for encoders
#define encoder1Pin 2
#define encoder2Pin 3

//Variables for encoder counts
volatile long encoder1Count = 0;
volatile long encoder2Count = 0;


long previousMillis = 0;
long currentMillis = 0;

long stampEnc1=0;
long stampEnc2=0;
float rpm1=0;
float rpm2=0;
//float speed=0;

//Variables for PID Control
long previousTime = 0;
float ePrevious = 0;
float eIntegral = 0;

void setup() {
  Serial.begin(9600);

  //Set pin modes
  pinMode(enA1, OUTPUT);
  pinMode(enB1, OUTPUT);
  pinMode(in11, OUTPUT);
  pinMode(in21, OUTPUT);
  pinMode(in31, OUTPUT);
  pinMode(in41, OUTPUT);
  pinMode(encoder1Pin, INPUT);
  pinMode(encoder2Pin, INPUT);
  
  //Interrupts for encoder pins
  attachInterrupt(digitalPinToInterrupt(encoder1Pin), handleEncoder1, RISING);
  attachInterrupt(digitalPinToInterrupt(encoder2Pin), handleEncoder2, RISING);
}

void loop() {
  //Set desired setpoint for motor 2  
  int target = rpm1;

  currentMillis=millis();
  if (currentMillis - previousMillis >= 1000) {
    // Update previousMillis to current time
    previousMillis = currentMillis;
    stampEnc1=encoder1Count;
    stampEnc2=encoder2Count;
  }
  //Move motor 1
  motor1(true,80);

  //PID gains and computation
  float kp = 2.0;
  float kd = 0.0;
  float ki = 2.0;
  float u = pidController(target, kp, kd, ki);

  //Control motor 2 based on PID
  moveMotor(u);

  //Print statements for debugging
  //Serial.print(encoder1Count);
  //Serial.print(", ");
  //Serial.println(encoder2Count);
  rpm1=CountRpm(encoder1Count-stampEnc1 ,currentMillis-previousMillis);
  rpm2=CountRpm(encoder2Count-stampEnc2 ,currentMillis-previousMillis);
  Serial.print(rpm1);
  Serial.print(", ");
  Serial.println(rpm2);
}

//Functions called during interrupts
void handleEncoder1() {
  encoder1Count++;
}
void handleEncoder2() {
  encoder2Count++;
}

void moveMotor(float u){
  //Maximum motor speed
  float speed = fabs(u);
  if (speed > 255){
    speed = 255;
  }
  //Stop the motor during overshoot
  if (encoder2Count > encoder1Count){
    speed = 0;
  }
  //Control the motor
  bool direction = 0;
  motor2(direction,speed);
}

float pidController(int target, float kp, float kd, float ki) {
  //Measure time elapsed since the last iteration
  long currentTime = micros();
  float deltaT = ((float)(currentTime - previousTime)) / 1.0e6;

  //Compute the error, derivative, and integral
  int e = target - rpm2;
  float eDerivative = (e - ePrevious) / deltaT;
  eIntegral = eIntegral + e * deltaT;
  
  //Compute the PID control signal
  float u = (kp * e) + (kd * eDerivative) + (ki * eIntegral);
  
  //Update variables for the next iteration
  previousTime = currentTime;
  ePrevious = e;

  return u;
}
float CountRpm(long encoderCount, long deltaTimeMillis) {
  // Convert encoder count to revolutions
  float revolutions = encoderCount / 360.0; // Assuming 1 revolution = 360 encoder counts

  // Calculate time per revolution in minutes
  float timePerRevolution = (deltaTimeMillis+1) / (1000.0 * 60.0);

  // Calculate RPM
  float rpm = revolutions / timePerRevolution;

  return rpm;
}
// Fungsi untuk menggerakkan motor 1 searah jarum jam dengan kecepatan tertentu
void motorcw1(int speed) {
    motorSpeedA1 = speed;
    analogWrite(enA1, motorSpeedA1);
    digitalWrite(in11, HIGH);
    digitalWrite(in21, LOW);
}

// MOTOR 1
// Fungsi untuk menggerakkan motor 1 berlawanan arah jarum jam dengan kecepatan tertentu
void motorccw1(int speed) {
    motorSpeedA1 = speed;
    analogWrite(enA1, motorSpeedA1);
    digitalWrite(in11, LOW);
    digitalWrite(in21, HIGH);
}

// Fungsi untuk menghentikan motor 1
void motorStop1() {
    motorSpeedA1 = 0;
    analogWrite(enA1, motorSpeedA1);
}

// MOTOR 2
// Fungsi untuk menggerakkan motor 2 searah jarum jam dengan kecepatan tertentu
void motorcw2(int speed) {
    motorSpeedB1 = speed; // Perbarui kecepatan motor B1
    analogWrite(enB1, motorSpeedB1);
    digitalWrite(in31, HIGH);
    digitalWrite(in41, LOW);
}

// Fungsi untuk menggerakkan motor 2 searah berlawanan jarum jam dengan kecepatan tertentu
void motorccw2(int speed) {
    motorSpeedB1 = speed; // Perbarui kecepatan motor B1
    analogWrite(enB1, motorSpeedB1);
    digitalWrite(in31, LOW);
    digitalWrite(in41, HIGH);
}

// Fungsi untuk menghentikan motor 2
void motorStop2() {
    motorSpeedB1 = 0;
    analogWrite(enB1, motorSpeedB1);
}


void motor1(bool dir,int pwm){
  if (dir) {
    motorcw1(pwm);
  }
  else {
    motorccw1(pwm);
  }
}
void motor2(bool dir,int pwm){
  if (dir) {
    motorcw2(pwm);
  }
  else {
    motorccw2(pwm);
  }
}
